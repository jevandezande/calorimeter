#!/usr/bin/env python3
import sys
import argparse

from glob import glob

from matplotlib import pyplot as plt

sys.path.insert(0, '../')
from calorimeter.plot import plotter
from calorimeter.scan import scans_from_csvs

parser = argparse.ArgumentParser(description='Plot the Scans from csv file(s).')
parser.add_argument(
    '-i', '--input',
    help='The file(s) to be read (accepts *).',
    type=str,
    nargs='+',
    default=[]
)
parser.add_argument(
    '-l', '--limits',
    help='The limits for the graph, x1, x2.',
    type=float,
    nargs='+',
    default=[]
)
parser.add_argument(
    '-p', '--peaks',
    help='Label the most prominent peaks with their location.',
    default=False,
    action='store_true'
)
parser.add_argument(
    '-n', '--name',
    help='The name(s) of the files to be read.',
    type=str,
    nargs='+',
    default='{autogenerate}'
)
parser.add_argument(
    '-s', '--save',
    help='Where to save the figure.',
    type=str,
    default=False
)
parser.add_argument(
    '--smooth',
    help='Smooth the plots.',
    type=int,
    nargs='?',
    const=True,
    default=False
)
parser.add_argument(
    '--subtract',
    help='Subtract two Scans from each other.',
    nargs='?',
    const=True,
    default=False,
)
parser.add_argument(
    '--title',
    help='Figure title',
    type=str,
    default=None
)
parser.add_argument(
    '-z', '--normalize',
    help='Normalize all plots based on the highest (or selected) peak.',
    type=float,
    nargs='?',
    const=True,
    default=False
)
args = parser.parse_args()

inps = [i for inp in args.input for i in glob(inp)]
if len(inps) == 0:
    print('You must specify file(s) to be read from.')
    sys.exit(1)

names = list(range(len(inps))) if args.name == '{autogenerate}' else args.name

scans = scans_from_csvs(*inps, names=names)

assert not (len(args.limits) % 2)
xlim = args.limits[:2] if args.limits else None
ylim = args.limits[2:4] if len(args.limits) > 2 else None

if args.subtract:
    if not len(scans) == 2:
        raise ValueError(f'Can only subtract two Scans from each other, got: {len(scans)}')

    if args.subtract == 'all':
        scans.append(scans[0] - scans[1])
    else:
        scans = [scans[0] - scans[1]]

fig, ax = plotter(
    scans,
    title=args.title,
    baseline_subtracted=False, normalized=args.normalize, smoothed=args.smooth,
    plot=None, xlim=xlim, xticks=None,
    legend=True, colors=None, markers=None,
    peaks=args.peaks,
    savefig=args.save
)

plt.show()
